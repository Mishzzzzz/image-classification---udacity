{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Developing an AI application\n",
    "\n",
    "Going forward, AI algorithms will be incorporated into more and more everyday applications. For example, you might want to include an image classifier in a smart phone app. To do this, you'd use a deep learning model trained on hundreds of thousands of images as part of the overall application architecture. A large part of software development in the future will be using these types of models as common parts of applications. \n",
    "\n",
    "In this project, you'll train an image classifier to recognize different species of flowers. You can imagine using something like this in a phone app that tells you the name of the flower your camera is looking at. In practice you'd train this classifier, then export it for use in your application. We'll be using [this dataset](http://www.robots.ox.ac.uk/~vgg/data/flowers/102/index.html) of 102 flower categories, you can see a few examples below. \n",
    "\n",
    "<img src='assets/Flowers.png' width=500px>\n",
    "\n",
    "The project is broken down into multiple steps:\n",
    "\n",
    "* Load and preprocess the image dataset\n",
    "* Train the image classifier on your dataset\n",
    "* Use the trained classifier to predict image content\n",
    "\n",
    "We'll lead you through each part which you'll implement in Python.\n",
    "\n",
    "When you've completed this project, you'll have an application that can be trained on any set of labeled images. Here your network will be learning about flowers and end up as a command line application. But, what you do with your new skills depends on your imagination and effort in building a dataset. For example, imagine an app where you take a picture of a car, it tells you what the make and model is, then looks up information about it. Go build your own dataset and make something new.\n",
    "\n",
    "First up is importing the packages you'll need. It's good practice to keep all the imports at the beginning of your code. As you work through this notebook and find you need to import a package, make sure to add the import up here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports here\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "import torch\n",
    "from torch import nn\n",
    "from torch import optim\n",
    "import torch.nn.functional as F\n",
    "from torchvision import datasets, transforms, models\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the data\n",
    "\n",
    "Here you'll use `torchvision` to load the data ([documentation](http://pytorch.org/docs/0.3.0/torchvision/index.html)). The data should be included alongside this notebook, otherwise you can [download it here](https://s3.amazonaws.com/content.udacity-data.com/nd089/flower_data.tar.gz). The dataset is split into three parts, training, validation, and testing. For the training, you'll want to apply transformations such as random scaling, cropping, and flipping. This will help the network generalize leading to better performance. You'll also need to make sure the input data is resized to 224x224 pixels as required by the pre-trained networks.\n",
    "\n",
    "The validation and testing sets are used to measure the model's performance on data it hasn't seen yet. For this you don't want any scaling or rotation transformations, but you'll need to resize then crop the images to the appropriate size.\n",
    "\n",
    "The pre-trained networks you'll use were trained on the ImageNet dataset where each color channel was normalized separately. For all three sets you'll need to normalize the means and standard deviations of the images to what the network expects. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`, calculated from the ImageNet images.  These values will shift each color channel to be centered at 0 and range from -1 to 1.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = 'flowers'\n",
    "train_dir = data_dir + '/train'\n",
    "valid_dir = data_dir + '/valid'\n",
    "test_dir = data_dir + '/test'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Define your transforms for the training, validation, and testing sets\n",
    "train_transforms = transforms.Compose([transforms.RandomRotation(30),\n",
    "                                      transforms.RandomResizedCrop(224),\n",
    "                                      transforms.RandomHorizontalFlip(),\n",
    "                                      transforms.ToTensor(),\n",
    "                                      transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                           [0.229, 0.224, 0.225])\n",
    "                                     ])\n",
    "\n",
    "test_transforms = transforms.Compose([transforms.RandomResizedCrop(224),\n",
    "                                      \n",
    "                                      transforms.ToTensor(),\n",
    "                                      transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                           [0.229, 0.224, 0.225])\n",
    "                                     ])\n",
    "\n",
    "val_transforms = transforms.Compose([transforms.RandomResizedCrop(224),\n",
    "                                      \n",
    "                                      transforms.ToTensor(),\n",
    "                                      transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                           [0.229, 0.224, 0.225])\n",
    "                                     ])\n",
    "\n",
    "# TODO: Load the datasets with ImageFolder\n",
    "Train_datasets = datasets.ImageFolder(train_dir, transform=train_transforms)\n",
    "Validate_datasets = datasets.ImageFolder(valid_dir, transform=val_transforms) \n",
    "Test_datasets = datasets.ImageFolder(test_dir, transform=test_transforms) \n",
    "\n",
    "\n",
    "\n",
    "# TODO: Using the image datasets and the trainforms, define the dataloaders\n",
    "trainloader = torch.utils.data.DataLoader(Train_datasets, batch_size=64, shuffle=True)\n",
    "validloader = torch.utils.data.DataLoader(Validate_datasets, batch_size=32)\n",
    "testloader = torch.utils.data.DataLoader(Test_datasets, batch_size=32)\n",
    "\n",
    "#dataloaders = [train_loader, Val_loader, test_loader]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Label mapping\n",
    "\n",
    "You'll also need to load in a mapping from category label to category name. You can find this in the file `cat_to_name.json`. It's a JSON object which you can read in with the [`json` module](https://docs.python.org/2/library/json.html). This will give you a dictionary mapping the integer encoded categories to the actual names of the flowers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "with open('cat_to_name.json', 'r') as f:\n",
    "    cat_to_name = json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'21': 'fire lily', '3': 'canterbury bells', '45': 'bolero deep blue', '1': 'pink primrose', '34': 'mexican aster', '27': 'prince of wales feathers', '7': 'moon orchid', '16': 'globe-flower', '25': 'grape hyacinth', '26': 'corn poppy', '79': 'toad lily', '39': 'siam tulip', '24': 'red ginger', '67': 'spring crocus', '35': 'alpine sea holly', '32': 'garden phlox', '10': 'globe thistle', '6': 'tiger lily', '93': 'ball moss', '33': 'love in the mist', '9': 'monkshood', '102': 'blackberry lily', '14': 'spear thistle', '19': 'balloon flower', '100': 'blanket flower', '13': 'king protea', '49': 'oxeye daisy', '15': 'yellow iris', '61': 'cautleya spicata', '31': 'carnation', '64': 'silverbush', '68': 'bearded iris', '63': 'black-eyed susan', '69': 'windflower', '62': 'japanese anemone', '20': 'giant white arum lily', '38': 'great masterwort', '4': 'sweet pea', '86': 'tree mallow', '101': 'trumpet creeper', '42': 'daffodil', '22': 'pincushion flower', '2': 'hard-leaved pocket orchid', '54': 'sunflower', '66': 'osteospermum', '70': 'tree poppy', '85': 'desert-rose', '99': 'bromelia', '87': 'magnolia', '5': 'english marigold', '92': 'bee balm', '28': 'stemless gentian', '97': 'mallow', '57': 'gaura', '40': 'lenten rose', '47': 'marigold', '59': 'orange dahlia', '48': 'buttercup', '55': 'pelargonium', '36': 'ruby-lipped cattleya', '91': 'hippeastrum', '29': 'artichoke', '71': 'gazania', '90': 'canna lily', '18': 'peruvian lily', '98': 'mexican petunia', '8': 'bird of paradise', '30': 'sweet william', '17': 'purple coneflower', '52': 'wild pansy', '84': 'columbine', '12': \"colt's foot\", '11': 'snapdragon', '96': 'camellia', '23': 'fritillary', '50': 'common dandelion', '44': 'poinsettia', '53': 'primula', '72': 'azalea', '65': 'californian poppy', '80': 'anthurium', '76': 'morning glory', '37': 'cape flower', '56': 'bishop of llandaff', '60': 'pink-yellow dahlia', '82': 'clematis', '58': 'geranium', '75': 'thorn apple', '41': 'barbeton daisy', '95': 'bougainvillea', '43': 'sword lily', '83': 'hibiscus', '78': 'lotus lotus', '88': 'cyclamen', '94': 'foxglove', '81': 'frangipani', '74': 'rose', '89': 'watercress', '73': 'water lily', '46': 'wallflower', '77': 'passion flower', '51': 'petunia'}\n",
      "pink primrose\n"
     ]
    }
   ],
   "source": [
    "print(cat_to_name)\n",
    "#print(f)\n",
    "print(cat_to_name[str(1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building and training the classifier\n",
    "\n",
    "Now that the data is ready, it's time to build and train the classifier. As usual, you should use one of the pretrained models from `torchvision.models` to get the image features. Build and train a new feed-forward classifier using those features.\n",
    "\n",
    "We're going to leave this part up to you. Refer to [the rubric](https://review.udacity.com/#!/rubrics/1663/view) for guidance on successfully completing this section. Things you'll need to do:\n",
    "\n",
    "* Load a [pre-trained network](http://pytorch.org/docs/master/torchvision/models.html) (If you need a starting point, the VGG networks work great and are straightforward to use)\n",
    "* Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout\n",
    "* Train the classifier layers using backpropagation using the pre-trained network to get the features\n",
    "* Track the loss and accuracy on the validation set to determine the best hyperparameters\n",
    "\n",
    "We've left a cell open for you below, but use as many as you need. Our advice is to break the problem up into smaller parts you can run separately. Check that each part is doing what you expect, then move on to the next. You'll likely find that as you work through each part, you'll need to go back and modify your previous code. This is totally normal!\n",
    "\n",
    "When training make sure you're updating only the weights of the feed-forward network. You should be able to get the validation accuracy above 70% if you build everything right. Make sure to try different hyperparameters (learning rate, units in the classifier, epochs, etc) to find the best model. Save those hyperparameters to use as default values in the next part of the project.\n",
    "\n",
    "One last important tip if you're using the workspace to run your code: To avoid having your workspace disconnect during the long-running tasks in this notebook, please read in the earlier page in this lesson called Intro to\n",
    "GPU Workspaces about Keeping Your Session Active. You'll want to include code from the workspace_utils.py module.\n",
    "\n",
    "**Note for Workspace users:** If your network is over 1 GB when saved as a checkpoint, there might be issues with saving backups in your workspace. Typically this happens with wide dense layers after the convolutional layers. If your saved checkpoint is larger than 1 GB (you can open a terminal and check with `ls -lh`), you should reduce the size of your hidden layers and train again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/vgg19-dcbb9e9d.pth\" to /root/.torch/models/vgg19-dcbb9e9d.pth\n",
      "100%|██████████| 574673361/574673361 [00:12<00:00, 47097216.66it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "VGG(\n",
       "  (features): Sequential(\n",
       "    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (1): ReLU(inplace)\n",
       "    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (3): ReLU(inplace)\n",
       "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
       "    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (6): ReLU(inplace)\n",
       "    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (8): ReLU(inplace)\n",
       "    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
       "    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (11): ReLU(inplace)\n",
       "    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (13): ReLU(inplace)\n",
       "    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (15): ReLU(inplace)\n",
       "    (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (17): ReLU(inplace)\n",
       "    (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
       "    (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (20): ReLU(inplace)\n",
       "    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (22): ReLU(inplace)\n",
       "    (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (24): ReLU(inplace)\n",
       "    (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (26): ReLU(inplace)\n",
       "    (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
       "    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (29): ReLU(inplace)\n",
       "    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (31): ReLU(inplace)\n",
       "    (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (33): ReLU(inplace)\n",
       "    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "    (35): ReLU(inplace)\n",
       "    (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
       "  )\n",
       "  (classifier): Sequential(\n",
       "    (0): Linear(in_features=25088, out_features=4096, bias=True)\n",
       "    (1): ReLU(inplace)\n",
       "    (2): Dropout(p=0.5)\n",
       "    (3): Linear(in_features=4096, out_features=4096, bias=True)\n",
       "    (4): ReLU(inplace)\n",
       "    (5): Dropout(p=0.5)\n",
       "    (6): Linear(in_features=4096, out_features=1000, bias=True)\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TODO: Build and train your network\n",
    "model = models.vgg19(pretrained=True)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Freeze parameters so we don't backprop through them\n",
    "for param in model.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "from collections import OrderedDict\n",
    "classifier = nn.Sequential(OrderedDict([\n",
    "                          ('fc1', nn.Linear(25088, 1000)),\n",
    "                          ('relu', nn.ReLU()),\n",
    "                          ('fc2', nn.Linear(1000, 102)),\n",
    "                          ('output', nn.LogSoftmax(dim=1))\n",
    "                          ]))\n",
    "    \n",
    "model.classifier = classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Train a model with a pre-trained network\n",
    "\n",
    "criterion = nn.NLLLoss()\n",
    "optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DEVICE = cpu; Time per batch: 15.907 seconds\n",
      "DEVICE = cuda; Time per batch: 0.008 seconds\n"
     ]
    }
   ],
   "source": [
    "for device in ['cpu', 'cuda']:\n",
    "\n",
    "    criterion = nn.NLLLoss()\n",
    "    # Only train the classifier parameters, feature parameters are frozen\n",
    "    optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)\n",
    "\n",
    "    model.to(device)\n",
    "\n",
    "    for ii, (inputs, labels) in enumerate(trainloader):\n",
    "\n",
    "        # Move input and label tensors to the GPU\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "        start = time.time()\n",
    "\n",
    "        outputs = model.forward(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        if ii==3:\n",
    "            break\n",
    "        \n",
    "    print(f\"DEVICE = {device}; Time per batch: {(time.time() - start)/3:.3f} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Train a model with a pre-trained network\n",
    "\n",
    "criterion = nn.NLLLoss()\n",
    "optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def validation(model, validloader, criterion):\n",
    "    test_loss = 0\n",
    "    accuracy = 0\n",
    "    \n",
    "    for images, labels in validloader:\n",
    "        images, labels = images.to('cuda'), labels.to('cuda')\n",
    "\n",
    "        output = model.forward(images)\n",
    "        test_loss += criterion(output, labels).item()\n",
    "\n",
    "        ps = torch.exp(output)\n",
    "        equality = (labels.data == ps.max(dim=1)[1])\n",
    "        accuracy += equality.type(torch.FloatTensor).mean()\n",
    "    \n",
    "    return test_loss, accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 1/5..  Training Loss: 2.795..  Validation Loss: 1.815..  Validation Accuracy: 0.539\n",
      "Epoch: 1/5..  Training Loss: 1.579..  Validation Loss: 1.257..  Validation Accuracy: 0.666\n",
      "Epoch: 2/5..  Training Loss: 1.240..  Validation Loss: 1.108..  Validation Accuracy: 0.696\n",
      "Epoch: 2/5..  Training Loss: 1.061..  Validation Loss: 0.999..  Validation Accuracy: 0.726\n",
      "Epoch: 2/5..  Training Loss: 0.918..  Validation Loss: 1.063..  Validation Accuracy: 0.737\n",
      "Epoch: 3/5..  Training Loss: 0.836..  Validation Loss: 0.883..  Validation Accuracy: 0.739\n",
      "Epoch: 3/5..  Training Loss: 0.792..  Validation Loss: 0.963..  Validation Accuracy: 0.725\n",
      "Epoch: 4/5..  Training Loss: 0.766..  Validation Loss: 0.858..  Validation Accuracy: 0.755\n",
      "Epoch: 4/5..  Training Loss: 0.664..  Validation Loss: 0.874..  Validation Accuracy: 0.773\n",
      "Epoch: 4/5..  Training Loss: 0.710..  Validation Loss: 0.859..  Validation Accuracy: 0.760\n",
      "Epoch: 5/5..  Training Loss: 0.691..  Validation Loss: 0.816..  Validation Accuracy: 0.775\n",
      "Epoch: 5/5..  Training Loss: 0.665..  Validation Loss: 0.808..  Validation Accuracy: 0.782\n"
     ]
    }
   ],
   "source": [
    "epochs = 5\n",
    "steps = 0\n",
    "running_loss = 0\n",
    "print_every = 40\n",
    "\n",
    "for e in range(epochs):\n",
    "    model.train()\n",
    "    for images, labels in trainloader:\n",
    "        images, labels = images.to('cuda'), labels.to('cuda')\n",
    "        steps += 1\n",
    "        \n",
    "        # Flatten images into a 784 long vector\n",
    "        #images.resize_(images.size()[0], 784)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        output = model.forward(images)\n",
    "        loss = criterion(output, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        \n",
    "        if steps % print_every == 0:\n",
    "            # Make sure network is in eval mode for inference\n",
    "            model.eval()\n",
    "            \n",
    "            # Turn off gradients for validation, saves memory and computations\n",
    "            with torch.no_grad():\n",
    "                val_loss, accuracy = validation(model, validloader, criterion)\n",
    "                \n",
    "            print(\"Epoch: {}/{}.. \".format(e+1, epochs),\n",
    "                  \"Training Loss: {:.3f}.. \".format(running_loss/print_every),\n",
    "                  \"Validation Loss: {:.3f}.. \".format(val_loss/len(validloader)),\n",
    "                  \"Validation Accuracy: {:.3f}\".format(accuracy/len(validloader)))\n",
    "            \n",
    "            running_loss = 0\n",
    "            \n",
    "            # Make sure training is back on\n",
    "            model.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing your network\n",
    "\n",
    "It's good practice to test your trained network on test data, images the network has never seen either in training or validation. This will give you a good estimate for the model's performance on completely new images. Run the test images through the network and measure the accuracy, the same way you did validation. You should be able to reach around 70% accuracy on the test set if the model has been trained well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_accuracy_on_test(testloader):    \n",
    "    correct = 0\n",
    "    total = 0\n",
    "    with torch.no_grad():\n",
    "        for images, labels in testloader:\n",
    "            images, labels = images.to('cuda'), labels.to('cuda')\n",
    "            outputs = model(images)\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "\n",
    "    print('Accuracy of the network on the test images: %d %%' % (100 * correct / total))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the network on the test images: 76 %\n"
     ]
    }
   ],
   "source": [
    "check_accuracy_on_test(testloader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save the checkpoint\n",
    "\n",
    "Now that your network is trained, save the model so you can load it later for making predictions. You probably want to save other things such as the mapping of classes to indices which you get from one of the image datasets: `image_datasets['train'].class_to_idx`. You can attach this to the model as an attribute which makes inference easier later on.\n",
    "\n",
    "```model.class_to_idx = image_datasets['train'].class_to_idx```\n",
    "\n",
    "Remember that you'll want to completely rebuild the model later so you can use it for inference. Make sure to include any information you need in the checkpoint. If you want to load the model and keep training, you'll want to save the number of epochs as well as the optimizer state, `optimizer.state_dict`. You'll likely want to use this trained model in the next part of the project, so best to save it now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the checkpoint \n",
    "\n",
    "checkpoint = {'arch': 'vgg19',\n",
    "              'state_dict': model.state_dict()}\n",
    "\n",
    "torch.save(checkpoint, 'checkpoint.pth')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the checkpoint\n",
    "\n",
    "At this point it's good to write a function that can load a checkpoint and rebuild the model. That way you can come back to this project and keep working on it without having to retrain the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['arch', 'state_dict'])\n"
     ]
    }
   ],
   "source": [
    "# TODO: Write a function that loads a checkpoint and rebuilds the model\n",
    "state_dict = torch.load('checkpoint.pth')\n",
    "print(state_dict.keys())\n",
    "#print(model)\n",
    "\n",
    "model2 = models.vgg19(pretrained=True)\n",
    "\n",
    "for param in model2.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "classifier = nn.Sequential(OrderedDict([\n",
    "                          ('fc1', nn.Linear(25088, 1000)),\n",
    "                          ('relu', nn.ReLU()),\n",
    "                          ('fc2', nn.Linear(1000, 102)),\n",
    "                          ('output', nn.LogSoftmax(dim=1))\n",
    "                          ]))\n",
    "# Put the classifier on the pretrained network\n",
    "model2 = model.classifier = classifier\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inference for classification\n",
    "\n",
    "Now you'll write a function to use a trained network for inference. That is, you'll pass an image into the network and predict the class of the flower in the image. Write a function called `predict` that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. It should look like \n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```\n",
    "\n",
    "First you'll need to handle processing the input image such that it can be used in your network. \n",
    "\n",
    "## Image Preprocessing\n",
    "\n",
    "You'll want to use `PIL` to load the image ([documentation](https://pillow.readthedocs.io/en/latest/reference/Image.html)). It's best to write a function that preprocesses the image so it can be used as input for the model. This function should process the images in the same manner used for training. \n",
    "\n",
    "First, resize the images where the shortest side is 256 pixels, keeping the aspect ratio. This can be done with the [`thumbnail`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) or [`resize`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) methods. Then you'll need to crop out the center 224x224 portion of the image.\n",
    "\n",
    "Color channels of images are typically encoded as integers 0-255, but the model expected floats 0-1. You'll need to convert the values. It's easiest with a Numpy array, which you can get from a PIL image like so `np_image = np.array(pil_image)`.\n",
    "\n",
    "As before, the network expects the images to be normalized in a specific way. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`. You'll want to subtract the means from each color channel, then divide by the standard deviation. \n",
    "\n",
    "And finally, PyTorch expects the color channel to be the first dimension but it's the third dimension in the PIL image and Numpy array. You can reorder dimensions using [`ndarray.transpose`](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.transpose.html). The color channel needs to be first and retain the order of the other two dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3, 224, 224])\n"
     ]
    }
   ],
   "source": [
    "from math import floor\n",
    "from PIL import Image\n",
    "\n",
    "def process_image(image):\n",
    "    img_pil = Image.open(image)\n",
    "   \n",
    "    adjustments = transforms.Compose([\n",
    "        transforms.Resize(256),\n",
    "        transforms.CenterCrop(224),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize(mean=[0.485, 0.456, 0.406],\n",
    "                             std=[0.229, 0.224, 0.225])\n",
    "    ])\n",
    "    \n",
    "    img_tensor = adjustments(img_pil)\n",
    "    \n",
    "    return img_tensor\n",
    "    \n",
    "    \n",
    "    # TODO: Process a PIL image for use in a PyTorch model\n",
    "\n",
    "img = (data_dir + '/test' + '/1/' + 'image_06752.jpg')\n",
    "img = process_image(img)\n",
    "print(img.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To check your work, the function below converts a PyTorch tensor and displays it in the notebook. If your `process_image` function works, running the output through this function should return the original image (except for the cropped out portions)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fb63b3aa358>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb63b393ac8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def imshow(image, ax=None, title=None):\n",
    "    if ax is None:\n",
    "        fig, ax = plt.subplots()\n",
    "    \n",
    "    image = image.numpy().transpose((1, 2, 0))\n",
    "    \n",
    "    mean = np.array([0.485, 0.456, 0.406])\n",
    "    std = np.array([0.229, 0.224, 0.225])\n",
    "    image = std * image + mean\n",
    "    \n",
    "    image = np.clip(image, 0, 1)\n",
    "    ax.imshow(image)\n",
    "    \n",
    "    return ax\n",
    "\n",
    "imshow(process_image(\"flowers/test/1/image_06743.jpg\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Class Prediction\n",
    "\n",
    "Once you can get images in the correct format, it's time to write a function for making predictions with your model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. You'll want to calculate the class probabilities then find the $K$ largest values.\n",
    "\n",
    "To get the top $K$ largest values in a tensor use [`x.topk(k)`](http://pytorch.org/docs/master/torch.html#torch.topk). This method returns both the highest `k` probabilities and the indices of those probabilities corresponding to the classes. You need to convert from these indices to the actual class labels using `class_to_idx` which hopefully you added to the model or from an `ImageFolder` you used to load the data ([see here](#Save-the-checkpoint)). Make sure to invert the dictionary so you get a mapping from index to class as well.\n",
    "\n",
    "Again, this method should take a path to an image and a model checkpoint, then return the probabilities and classes.\n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(image_path, model, topk=5):   \n",
    "    model.to('cuda:0')\n",
    "    img_torch = process_image(image_path)\n",
    "    img_torch = img_torch.unsqueeze_(0)\n",
    "    img_torch = img_torch.float()\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        output = model.forward(img_torch.cuda())\n",
    "        \n",
    "    probability = F.softmax(output.data,dim=1)\n",
    "    \n",
    "    return probability.topk(topk)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(1.00000e-02 *\n",
      "       [[ 1.4855,  1.3921,  1.3869,  1.3336,  1.3310]], device='cuda:0')\n",
      "tensor([[ 52,  72,  87,   5,  60]], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "img = (data_dir + '/test' + '/10/' + 'image_07104.jpg')\n",
    "probability, classes = predict(img, model)\n",
    "print(probability)\n",
    "print(classes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([ 52,  72,  87,   5,  60], device='cuda:0')\n",
      "['mallow' 'snapdragon' 'thorn apple' 'prince of wales feathers'\n",
      " 'hippeastrum']\n",
      "['mallow' 'snapdragon' 'thorn apple' 'prince of wales feathers'\n",
      " 'hippeastrum']\n"
     ]
    }
   ],
   "source": [
    "#preparing class_names using mapping with cat_to_name\n",
    "\n",
    "labels = list(cat_to_name.values())\n",
    "labels = np.array(labels)\n",
    "#print(labels[x] for x in classes)\n",
    "\n",
    "\n",
    "\n",
    "for x in classes:\n",
    "    print(x)\n",
    "    print(labels[x])\n",
    "    c=labels[x]\n",
    "    \n",
    "print (c)\n",
    "\n",
    "\n",
    "#imshow('test', title=[labels[x] for x in classes]\n",
    "\n",
    "#imshow(out, title=[labels[x] for x in classes])\n",
    "#class_names = [cat_to_name[item] for item in labels]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sanity Checking\n",
    "\n",
    "Now that you can use a trained model for predictions, check to make sure it makes sense. Even if the testing accuracy is high, it's always good to check that there aren't obvious bugs. Use `matplotlib` to plot the probabilities for the top 5 classes as a bar graph, along with the input image. It should look like this:\n",
    "\n",
    "<img src='assets/inference_example.png' width=300px>\n",
    "\n",
    "You can convert from the class integer encoding to actual flower names with the `cat_to_name.json` file (should have been loaded earlier in the notebook). To show a PyTorch tensor as an image, use the `imshow` function defined above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "def check_sanity(image_path, model):\n",
    "    \n",
    "    #fig, ax = plt.subplots()\n",
    "    plt.figure(figsize = (6,10))\n",
    "\n",
    "\n",
    "    probs, classes = predict(image_path, model)\n",
    "    img = process_image (image_path)\n",
    "    imshow(img)\n",
    "    plt.show()\n",
    "    \n",
    "    labels = list(cat_to_name.values())\n",
    "    labels = np.array(labels)\n",
    "    \n",
    "    class_names = []\n",
    "    \n",
    "    for x in classes:\n",
    "        print(x)\n",
    "        c= labels[x]\n",
    "        class_names= c\n",
    "\n",
    "\n",
    "        \n",
    "    plt.subplot(2,1,1)\n",
    "    sns.barplot(x=probs, y=class_names, color= 'red')\n",
    "    plt.show()\n",
    "\n",
    "    #imshow(process_image(image_path))\n",
    "    #display graph\n",
    "    #plt.show()\n",
    "    #print(probs,classes)\n",
    "    \n",
    "    #print(cat_to_name[str(1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_sanity2(path, model):\n",
    "    \n",
    "    plt.rcParams[\"figure.figsize\"] = (6,6)\n",
    "    plt.subplot(211)\n",
    "    \n",
    "    index = 1\n",
    "\n",
    "    probabilities = predict(path, model)\n",
    "    image = process_image(path)\n",
    "    probabilities = probabilities\n",
    "    \n",
    "\n",
    "    axs = imshow(image, ax = plt)\n",
    "    axs.axis('off')\n",
    "    axs.title(cat_to_name[str(index)])\n",
    "    axs.show()\n",
    "    \n",
    "    \n",
    "    a = np.array(probabilities[0][0])\n",
    "    b = [cat_to_name[str(index + 1)] for index in np.array(probabilities[1][0])]\n",
    "    \n",
    "    \n",
    "    N=float(len(b))\n",
    "    fig,ax = plt.subplots(figsize=(8,3))\n",
    "    width = 0.8\n",
    "    tickLocations = np.arange(N)\n",
    "    ax.bar(tickLocations, a, width, linewidth=4.0, align = 'center')\n",
    "    ax.set_xticks(ticks = tickLocations)\n",
    "    ax.set_xticklabels(b)\n",
    "    ax.set_xlim(min(tickLocations)-0.6,max(tickLocations)+0.6)\n",
    "    ax.set_yticks([0.2,0.4,0.6,0.8,1,1.2])\n",
    "    ax.set_ylim((0,1))\n",
    "    ax.yaxis.grid(True)\n",
    "    #ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))\n",
    "\n",
    "    plt.show()\n",
    "    \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb60a7bf390>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb60a3624a8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "image = 'flowers/test/1/image_06743.jpg'\n",
    "\n",
    "check_sanity2(image, model)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
